<?php

/**
 * @file
 * Contains metsis_search.module for drupal8.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Solarium\QueryType\Select\Query\Query;
use Solarium\QueryType\Select\Result\Result;
use Solarium\QueryType\Select\Result\Document;
use Solarium\Core\Query\DocumentInterface;
use Solarium\Core\Query\Result\ResultInterface;
use Drupal\metsis_search\SearchUtils;


/**
 * Implements hook_help().
 */
function metsis_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the metsis_search module.
    case 'help.page.metsis_search':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('METSIS Metadata Search') . '</p>';
      return $output;

    default:
  }
}

/**
* Implements hook_views_pre_render().
*
* Adding  our custom css to the search view
*/
function metsis_search_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'metsis_search')) {
    $view->element['#attached']['library'][] = 'metsis_search/metadata_search_view';
      $view->element['#attached']['library'][] = 'metsis_search/children_count';
      $view->element['#attached']['library'][] = 'blazy/load';
      $view->element['#attached']['library'][] = 'metsis_lib/adc_buttons';

      //$view->element['#attributes']['id'][] = 'children';
    /*  foreach($view->result as &$row) {
        dpm($row);
      } */
  }
  if (isset($view) && ($view->storage->id() == 'metsis_elements')) {
      $view->element['#attached']['library'][] = 'metsis_search/metadata_search_view';
      //$view->element['#attached']['library'][] = 'metsis_search/children_count';
      $view->element['#attached']['library'][] = 'blazy/load';
      $view->element['#attached']['library'][] = 'metsis_lib/adc_buttons';
  }


}

/**
 * Implemets hook_theme()
 */
function metsis_search_theme() {
    \Drupal::logger('metsis_search')->debug("Enter: hook_theme");

  //Check if we already have an active bboxFilter
  $tempstore = \Drupal::service('tempstore.private')->get('metsis_search');
  $bboxFilter = $tempstore->get('bboxFilter');
  $tllat = "";
  $tllon = "";
  $brlat = "";
  $brlon = "";
  if ($bboxFilter != NULL) {
    $tllat = $tempstore->get('tllat');
    $tllon = $tempstore->get('tllon');
    $brlat = $tempstore->get('brlat');
    $brlon = $tempstore->get('brlon');
  }

  //Get saved configuration
  $config = \Drupal::config('metsis_search.settings');
  $map_projections = $config->get('map_projections');
  $map_init_proj =  $config->get('map_init_proj');
  $map_search_text =  $config->get('map_search_text');
  $map_layers_list =  $config->get('map_layers');

  return [
    'block__exposedformmetsis_search_viewresults' => [
      'render element' => 'elements',
      'base hook' => 'block',
    ],
    'views_view_fields__metsis_search_view__results' => [
      'render element' => 'elements',
      'base hook' => 'views field',
    ],
    'views_view__metsis_search_view__results' => [
      'render element' => 'elements',
      'base hook' => 'views view',
    ],
   'block__mapblockformetsissearch' => [
      'render element' => 'elements',
      'base hook' => 'block',
      'variables' => [
        'map_projections' => $map_projections,
        'map_init_proj' => $map_init_proj,
        'map_search_text' => $map_search_text,
        'map_layers_list' => $map_layers_list,
      ],
      #'template' =>   'block--mapblockformetsissearch',
    ],
  ];
}

/**
 * Implments hook_views_query_alter
 */
function metsis_search_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  if( $view->id() == 'metsis_search') {
  //Do something withe the veiws query here

  }
}

function metsis_search_search_api_solr_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
  $tempstore = \Drupal::service('tempstore.private')->get('metsis_search');
  // Get the current bbox filter
  $bboxFilter = $tempstore->get('bboxFilter');

  //Get filter predicate from config
  $config = \Drupal::config('metsis_search.settings');
  $map_bbox_filter = $config->get('map_bbox_filter');

  //Add bbox filter query if drawn bbox on map
  \Drupal::logger('metsis_search-hook_solr_qyery_alter')->debug("bboxFilter: " . $bboxFilter);
 if($bboxFilter != NULL && $bboxFilter != "") {
   $solarium_query->createFilterQuery('bbox')->setQuery('{!field f=bbox score=overlapRatio}' .$map_bbox_filter.'(' . $bboxFilter . ')');
  }

  //Add extra fields to return from results
  $fields = $solarium_query->getFields();
  $fields[] = 'geographic_extent_rectangle_south';
  $fields[] = 'geographic_extent_rectangle_north';
  $fields[] = 'geographic_extent_rectangle_west';
  $fields[] = 'geographic_extent_rectangle_east';
  $fields[] = 'use_constraint';
  $fields[] = 'iso_topic_category';
  $fields[] = 'activity_type';
  $fields[] = 'dataset_production_status';
  $fields[] = 'metadata_status';
  $fields[] = 'data_center_long_name';
  $fields[] = 'data_center_short_name';
  $fields[] = 'data_center_url';
  $fields[] = 'personnel_datacenter_role';
  $fields[] = 'personnel_datacenter_name';
  $fields[] = 'personnel_datacenter_email';
  $fields[] = 'personnel_name';
  $fields[] = 'metadata_identifier';
  $fields[] = 'collection';
  $fields[] = 'keywords_keyword';
  $fields[] = 'project_long_name';
  $fields[] = 'abstract';

  //make sure the fields array contains unique fields
  $uniq_fields = array_unique($fields);



  //dpm($uniq_fields);
  $solarium_query->setFields($uniq_fields);
  /**
   * TODO:: Update url params and breadcrumbs
   */

}

function metsis_search_search_api_solr_search_results_alter(\Drupal\search_api\Query\ResultSetInterface $result_set,
                                                     \Drupal\search_api\Query\QueryInterface $query,
                                                       \Solarium\QueryType\Select\Result\Result $result) {


    //Extract some info for the search map from the solr result
    $extracted_info = SearchUtils::getExtractedInfo($result);
    //add the extracted info to the tempstore
    $tempstore = \Drupal::service('tempstore.private')->get('metsis_search');
    $tempstore->set('extracted_info', $extracted_info);
}

/*
 * Implements hook_views_post_render.
*/
/*function metsis_search_views_post_render(&$view) {
  if( $view->id() == 'metsis_search') {

     }
  //  \Drupal::logger('metsis_search')->debug("Entering hook_views_post_render");
  }
*/


function metsis_search_views_pre_build(ViewExecutable $view) {
  if( $view->id() == 'metsis_search') {
    $request = \Drupal::request();
    $query_from_request = $request->query->all();
  //Check if operator op is set in query and op=Reset to reset boundingbox
    if(isset($query_from_request['op'])) {
      if($query_from_request['op'] == "Reset") {
        \Drupal::logger('metsis_search')->debug("Got reset event..resetting bbox");
        $tempstore = \Drupal::service('tempstore.private')->get('metsis_search');
        $tempstore->delete('bboxFilter');
        $tempstore->delete('tllat');
        $tempstore->delete('tllon');
        $tempstore->delete('brlat');
        $tempstore->delete('brlon');

      }
    }

  }
}

function metsis_search_block_view_alter(array &$build, Drupal\Core\Block\BlockPluginInterface $block) {
//  if( $block->id() == 'metsis_search_map_block') {
  //  \Drupal::logger('metsis_search')->debug("Entering hook_block_alter for MapSearchBlock");
  //}
}
/**
 * Implements hook_form_alter().
 */
function metsis_search_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//  \Drupal::logger('metsis_search')->debug("Entering hook_form_alter: form_id=" .$form_id );
//if ($form_id == 'views_exposed_form') {
//  $form['actions']['reset']['#ajax'] = [
//    'callback' => '\Drupal\metsis_search\Controller\MapSearchController::resetCallback',
//  ];
//var_dump($form);
//}
}
